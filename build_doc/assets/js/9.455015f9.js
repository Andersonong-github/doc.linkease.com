(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{576:function(e,t,a){e.exports=a.p+"assets/img/advanced1.9f3ab106.jpg"},577:function(e,t,a){e.exports=a.p+"assets/img/advanced2.b15f4ceb.jpg"},578:function(e,t,a){e.exports=a.p+"assets/img/advanced3.c46b9520.jpg"},579:function(e,t,a){e.exports=a.p+"assets/img/advanced4.085dd6e2.jpg"},580:function(e,t,a){e.exports=a.p+"assets/img/advanced5.bd5d730f.jpg"},581:function(e,t,a){e.exports=a.p+"assets/img/advanced55.67f636fd.jpg"},582:function(e,t,a){e.exports=a.p+"assets/img/advanced6.dfc705a6.jpg"},583:function(e,t,a){e.exports=a.p+"assets/img/advanced7.9ea54ead.jpg"},584:function(e,t,a){e.exports=a.p+"assets/img/advanced8.5085eb42.jpg"},585:function(e,t,a){e.exports=a.p+"assets/img/advanced9.b0bc0933.jpg"},586:function(e,t,a){e.exports=a.p+"assets/img/advanced10.5f2bcbf8.jpg"},587:function(e,t,a){e.exports=a.p+"assets/img/advanced11.e29e980d.jpg"},588:function(e,t,a){e.exports=a.p+"assets/img/advanced12.d80104f7.jpg"},589:function(e,t,a){e.exports=a.p+"assets/img/advanced13.03648198.jpg"},590:function(e,t,a){e.exports=a.p+"assets/img/advanced14.1fc3b89e.jpg"},591:function(e,t,a){e.exports=a.p+"assets/img/advanced15.1f30abec.jpg"},592:function(e,t,a){e.exports=a.p+"assets/img/advanced16.9e997147.jpg"},593:function(e,t,a){e.exports=a.p+"assets/img/advanced17.6922b99b.jpg"},594:function(e,t,a){e.exports=a.p+"assets/img/advanced18.ae11a982.jpg"},595:function(e,t,a){e.exports=a.p+"assets/img/advanced19.1cec8496.jpg"},596:function(e,t,a){e.exports=a.p+"assets/img/advanced20.dfc6908c.jpg"},597:function(e,t,a){e.exports=a.p+"assets/img/advanced21.3057f06e.jpg"},598:function(e,t,a){e.exports=a.p+"assets/img/advanced22.6be4a9e1.jpg"},599:function(e,t,a){e.exports=a.p+"assets/img/advanced23.b1f17869.jpg"},600:function(e,t,a){e.exports=a.p+"assets/img/advanced24.30ef75a9.jpg"},601:function(e,t,a){e.exports=a.p+"assets/img/advanced25.fc2b3e7c.jpg"},602:function(e,t,a){e.exports=a.p+"assets/img/advanced26.8e3618bd.jpg"},855:function(e,t,a){"use strict";a.r(t);var s=a(47),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"混杂模式macvlan"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#混杂模式macvlan"}},[e._v("#")]),e._v(" 混杂模式MACVLAN")]),e._v(" "),s("p",[e._v("Linux原始的macvlan没有混杂模式，打开混杂模式也会过滤掉不是发给自己的报文。")]),e._v(" "),s("p",[e._v("ARS2的内核改变了这个行为，混杂模式的macvlan可以接收到宿主接口的所有报文，除了单播给宿主接口的报文。")]),e._v(" "),s("p",[e._v("应用场景：使用混杂模式macvlan，将WAN口的报文转发到一个网桥中，加入此网桥的虚拟网卡即可加入宿主机WAN口所在的局域网，获得局域网IP。以Docker为例：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('HOST_WAN=eth0\n\nip link add macv-docker-wan link $HOST_WAN type macvlan mode private\nip link set dev macv-docker-wan promisc on\n\nip link add br-docker-wan type bridge\n\nip link set dev macv-docker-wan master br-docker-wan\nip link set dev macv-docker-wan up\n\ndocker network ls -f "name=docker-wan" | grep -q docker-wan || \\\n    docker network create -d bridge -o "com.docker.network.bridge.name=br-docker-wan" docker-wan\n\necho "0" > /proc/sys/net/bridge/bridge-nf-call-iptables\n')])])]),s("p",[e._v("创建容器并加入docker-wan网络：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("docker run --net=docker-wan debian\n")])])]),s("p",[e._v("Docker会给容器分配IP，但这里用不上，容器内执行以下命令获得局域网IP：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("ip addr flush dev eth0 && udhcpc\n")])])]),s("h2",{attrs:{id:"jellyfin硬解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jellyfin硬解"}},[e._v("#")]),e._v(" Jellyfin硬解")]),e._v(" "),s("p",[e._v("Jellyfin是一个优秀的家庭影院平台，而ARS2支持4K H265（HEVC），H264等格式硬解，这样我们就可以把ARS2打造成您的私人家庭影院。")]),e._v(" "),s("h4",{attrs:{id:"_1-ars2上安装硬盘-或者移动硬盘"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-ars2上安装硬盘-或者移动硬盘"}},[e._v("#")]),e._v(" 1.ARS2上安装硬盘，或者移动硬盘；")]),e._v(" "),s("h4",{attrs:{id:"_2-进入ars2的管理界面-系统-挂载点-挂载好硬盘-记住路径"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-进入ars2的管理界面-系统-挂载点-挂载好硬盘-记住路径"}},[e._v("#")]),e._v(" 2.进入ARS2的管理界面—系统—挂载点，挂载好硬盘，记住路径；")]),e._v(" "),s("p",[s("img",{attrs:{src:a(576),alt:"img"}})]),e._v(" "),s("h4",{attrs:{id:"_3-docker拉取jellyfin镜像-进入终端-输入下面的命令并回车运行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-docker拉取jellyfin镜像-进入终端-输入下面的命令并回车运行"}},[e._v("#")]),e._v(" 3.Docker拉取Jellyfin镜像，进入终端，输入下面的命令并回车运行;")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("docker pull jjm2473/jellyfin-rtk:v10.7\n")])])]),s("p",[s("img",{attrs:{src:a(577),alt:"img"}})]),e._v(" "),s("h4",{attrs:{id:"_4-接着继续输入如下命令并回车运行-创建jellyfin容器-先别直接复制输入-下方有说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-接着继续输入如下命令并回车运行-创建jellyfin容器-先别直接复制输入-下方有说明"}},[e._v("#")]),e._v(" 4.接着继续输入如下命令并回车运行，创建Jellyfin容器(先别直接复制输入，下方有说明)；")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("docker run --restart=unless-stopped -d \\\n     --device /dev/rpc0:/dev/rpc0 \\\n     --device /dev/rpc1:/dev/rpc1 \\\n     --device /dev/rpc2:/dev/rpc2 \\\n     --device /dev/rpc3:/dev/rpc3 \\\n     --device /dev/rpc4:/dev/rpc4 \\\n     --device /dev/rpc5:/dev/rpc5 \\\n     --device /dev/rpc6:/dev/rpc6 \\\n     --device /dev/rpc7:/dev/rpc7 \\\n     --device /dev/rpc100:/dev/rpc100 \\\n     --device /dev/uio250:/dev/uio250 \\\n     --device /dev/uio251:/dev/uio251 \\\n     --device /dev/uio252:/dev/uio252 \\\n     --device /dev/uio253:/dev/uio253 \\\n     --device /dev/ion:/dev/ion \\\n     --device /dev/ve3:/dev/ve3 \\\n     --device /dev/vpu:/dev/vpu \\\n     --device /dev/memalloc:/dev/memalloc \\\n     -v /tmp/shm:/dev/shm \\\n     -v /sys/class/uio:/sys/class/uio \\\n     -v /var/tmp/vowb:/var/tmp/vowb \\\n     --pid=host \\\n     --dns=172.17.0.1 \\\n     -p 8096:8096 -v /root/jellyfin/config:/config -v /mnt/sda3/media:/media --name myjellyfin-rtk-10.7 jjm2473/jellyfin-rtk:v10.7\n")])])]),s("p",[s("strong",[e._v("说明：")])]),e._v(" "),s("p",[e._v("/root/jellyfin/config 用来存放Jellyfin的配置以及转码的临时文件，按需修改。")]),e._v(" "),s("p",[e._v("/mnt/sda3/media 表示媒体文件所在路径，改成自己挂载硬盘的媒体路径，按需修改。")]),e._v(" "),s("p",[s("img",{attrs:{src:a(578),alt:"img"}})]),e._v(" "),s("h4",{attrs:{id:"_5-上面2条命令完成以后-管理界面-docker-容器-就能看到jellyfin已经运行起来了"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-上面2条命令完成以后-管理界面-docker-容器-就能看到jellyfin已经运行起来了"}},[e._v("#")]),e._v(" 5.上面2条命令完成以后，管理界面—Docker—容器，就能看到Jellyfin已经运行起来了；")]),e._v(" "),s("p",[s("img",{attrs:{src:a(579),alt:"img"}})]),e._v(" "),s("h4",{attrs:{id:"_6-浏览器打开设备对应ip加上8096端口-例如http-192-168-100-1-8096-即可进入jellyfin视界。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-浏览器打开设备对应ip加上8096端口-例如http-192-168-100-1-8096-即可进入jellyfin视界。"}},[e._v("#")]),e._v(" 6.浏览器打开设备对应IP加上8096端口，例如http://192.168.100.1:8096/，即可进入Jellyfin视界。")]),e._v(" "),s("p",[s("img",{attrs:{src:a(580),alt:"img"}})]),e._v(" "),s("h4",{attrs:{id:"_7-进入jellyfin视界后-不要去动硬件加速。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-进入jellyfin视界后-不要去动硬件加速。"}},[e._v("#")]),e._v(" 7.进入Jellyfin视界后，不要去动硬件加速。")]),e._v(" "),s("h4",{attrs:{id:"因为docker镜像和创建容器命令中已经配置好硬解-所以千万不要去动这个硬件加速设置。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#因为docker镜像和创建容器命令中已经配置好硬解-所以千万不要去动这个硬件加速设置。"}},[e._v("#")]),e._v(" 因为docker镜像和创建容器命令中已经配置好硬解，所以千万不要去动这个硬件加速设置。")]),e._v(" "),s("p",[s("img",{attrs:{src:a(581),alt:"img"}})]),e._v(" "),s("h2",{attrs:{id:"home-assistant"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#home-assistant"}},[e._v("#")]),e._v(" Home Assistant")]),e._v(" "),s("p",[e._v("一款优秀的家庭自动化平台，您的智能家居好帮手。")]),e._v(" "),s("h4",{attrs:{id:"_1-docker拉取homeassistant镜像-进入终端-输入下面的命令并回车运行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-docker拉取homeassistant镜像-进入终端-输入下面的命令并回车运行"}},[e._v("#")]),e._v(" 1.Docker拉取homeassistant镜像，进入终端，输入下面的命令并回车运行;")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("docker pull homeassistant/home-assistant:latest\n")])])]),s("p",[s("img",{attrs:{src:a(582),alt:"img"}})]),e._v(" "),s("h4",{attrs:{id:"_2-接着继续输入如下命令并回车运行-创建homeassistant容器-先别直接复制输入-下方有说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-接着继续输入如下命令并回车运行-创建homeassistant容器-先别直接复制输入-下方有说明"}},[e._v("#")]),e._v(" 2.接着继续输入如下命令并回车运行，创建homeassistant容器(先别直接复制输入，下方有说明)；")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('docker run -d \\\n  --name homeassistant \\\n  --privileged \\\n  --restart=unless-stopped \\\n  -e TZ="Asia/Shanghai" \\\n  -v /root/homeassistant/config:/config \\\n  --network=host \\\n  homeassistant/home-assistant:latest\n')])])]),s("p",[s("strong",[e._v("说明：")])]),e._v(" "),s("p",[e._v("/root/homeassistant/config 用来存放homeassistant的配置文件，按需修改。")]),e._v(" "),s("p",[s("img",{attrs:{src:a(583),alt:"img"}})]),e._v(" "),s("h4",{attrs:{id:"_3-上面2条命令完成以后-管理界面-docker-容器-就能看到homeassistant已经运行起来了"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-上面2条命令完成以后-管理界面-docker-容器-就能看到homeassistant已经运行起来了"}},[e._v("#")]),e._v(" 3.上面2条命令完成以后，管理界面—Docker—容器，就能看到homeassistant已经运行起来了；")]),e._v(" "),s("p",[s("img",{attrs:{src:a(584),alt:"img"}})]),e._v(" "),s("h4",{attrs:{id:"_4-浏览器打开设备对应ip加上8123端口-例如http-192-168-100-1-8123-即可进入homeassistant控制台。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-浏览器打开设备对应ip加上8123端口-例如http-192-168-100-1-8123-即可进入homeassistant控制台。"}},[e._v("#")]),e._v(" 4.浏览器打开设备对应IP加上8123端口，例如http://192.168.100.1:8123/，即可进入homeassistant控制台。")]),e._v(" "),s("p",[s("img",{attrs:{src:a(585),alt:"img"}})]),e._v(" "),s("h2",{attrs:{id:"node-red"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#node-red"}},[e._v("#")]),e._v(" Node-RED")]),e._v(" "),s("p",[e._v("Node-RED，这个项目是由IBM新兴技术服务团队构建的可视化物联网编排工具，可基于浏览器的流程编辑器连接设备、服务器和API应用。可以将Home Assistant接入Node-Red实现自动化。")]),e._v(" "),s("h4",{attrs:{id:"_1-docker拉取node-red镜像-进入终端-输入下面的命令并回车运行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-docker拉取node-red镜像-进入终端-输入下面的命令并回车运行"}},[e._v("#")]),e._v(" 1.Docker拉取node-red镜像，进入终端，输入下面的命令并回车运行;")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("docker pull nodered/node-red\n")])])]),s("p",[s("img",{attrs:{src:a(586),alt:"img"}})]),e._v(" "),s("h4",{attrs:{id:"_2-接着继续输入如下命令并回车运行-创建node-red容器-先别直接复制输入-下方有说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-接着继续输入如下命令并回车运行-创建node-red容器-先别直接复制输入-下方有说明"}},[e._v("#")]),e._v(" 2.接着继续输入如下命令并回车运行，创建node-red容器(先别直接复制输入，下方有说明)；")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('docker run -d --name="nodered" \\\n  --net=bridge \\\n  --restart unless-stopped \\\n  -e TZ="Asia/Shanghai" \\\n  -p 1880:1880/tcp \\\n  -v /root/node-red/nodered:/data:rw \\\n  nodered/node-red\n')])])]),s("p",[s("strong",[e._v("说明：")])]),e._v(" "),s("p",[e._v("/root/node-red/nodered 用来存放node-red的数据文件，按需修改。")]),e._v(" "),s("p",[s("img",{attrs:{src:a(587),alt:"img"}})]),e._v(" "),s("h4",{attrs:{id:"_3-接着输入以下命令-解决node-red容器启动不了的bug"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-接着输入以下命令-解决node-red容器启动不了的bug"}},[e._v("#")]),e._v(" 3.接着输入以下命令(解决node-red容器启动不了的bug)；")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("chmod -R 777 /root/node-red/nodered\n")])])]),s("p",[s("img",{attrs:{src:a(588),alt:"img"}})]),e._v(" "),s("h4",{attrs:{id:"_4-上面3条命令完成以后-管理界面-docker-容器-找到node-red重启-然后node-red就运行起来了"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-上面3条命令完成以后-管理界面-docker-容器-找到node-red重启-然后node-red就运行起来了"}},[e._v("#")]),e._v(" 4.上面3条命令完成以后，管理界面—Docker—容器，找到node-red重启，然后node-red就运行起来了；")]),e._v(" "),s("p",[s("img",{attrs:{src:a(589),alt:"img"}})]),e._v(" "),s("h4",{attrs:{id:"_5-浏览器打开设备对应ip加上1880端口-例如http-192-168-100-1-1880-即可进入node-red控制台。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-浏览器打开设备对应ip加上1880端口-例如http-192-168-100-1-1880-即可进入node-red控制台。"}},[e._v("#")]),e._v(" 5.浏览器打开设备对应IP加上1880端口，例如http://192.168.100.1:1880/，即可进入node-red控制台。")]),e._v(" "),s("p",[s("img",{attrs:{src:a(590),alt:"img"}})]),e._v(" "),s("h2",{attrs:{id:"mqtt-emqx"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mqtt-emqx"}},[e._v("#")]),e._v(" MQTT-EMQX")]),e._v(" "),s("p",[e._v("EMQX基于Erlang/OTP平台开发的MQTT消息服务器，是开源社区中最流行的MQTT 消息服务器，支持丰富的物联网协议，包括 MQTT、LwM2M、MQTT-SN、CoAP、 LoRaWAN、 HTTP和WebSocket等。")]),e._v(" "),s("h4",{attrs:{id:"_1-docker拉取emqx镜像并创建容器-进入终端-输入下面的命令并回车运行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-docker拉取emqx镜像并创建容器-进入终端-输入下面的命令并回车运行"}},[e._v("#")]),e._v(" 1.Docker拉取emqx镜像并创建容器，进入终端，输入下面的命令并回车运行;")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("docker run -d --name emqx --restart unless-stopped -p 1883:1883 -p 8081:8081 -p 8083:8083 -p 8883:8883 -p 8084:8084 -p 18083:18083 emqx/emqx\n")])])]),s("p",[s("img",{attrs:{src:a(591),alt:"img"}})]),e._v(" "),s("h4",{attrs:{id:"_2-上面命令完成以后-管理界面-docker-容器-就能看到emqx已经运行起来了"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-上面命令完成以后-管理界面-docker-容器-就能看到emqx已经运行起来了"}},[e._v("#")]),e._v(" 2.上面命令完成以后，管理界面—Docker—容器，就能看到emqx已经运行起来了；")]),e._v(" "),s("p",[s("img",{attrs:{src:a(592),alt:"img"}})]),e._v(" "),s("h4",{attrs:{id:"_3-浏览器打开设备对应ip加上18083端口-例如http-192-168-100-1-18083-即可进入eqmx控制台。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-浏览器打开设备对应ip加上18083端口-例如http-192-168-100-1-18083-即可进入eqmx控制台。"}},[e._v("#")]),e._v(" 3.浏览器打开设备对应IP加上18083端口，例如http://192.168.100.1:18083/，即可进入eqmx控制台。")]),e._v(" "),s("p",[s("strong",[e._v("说明：")])]),e._v(" "),s("p",[e._v("初始帐号：admin")]),e._v(" "),s("p",[e._v("初始密码：public")]),e._v(" "),s("p",[e._v("连接端口是1883")]),e._v(" "),s("p",[s("img",{attrs:{src:a(593),alt:"img"}})]),e._v(" "),s("p",[s("img",{attrs:{src:a(594),alt:"img"}})]),e._v(" "),s("h2",{attrs:{id:"内网测速"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内网测速"}},[e._v("#")]),e._v(" 内网测速")]),e._v(" "),s("p",[e._v("speedtest-x是基于librespeed的一款优秀轻量的本地内网测速工具。")]),e._v(" "),s("h4",{attrs:{id:"_1-docker拉取speedtest-x镜像并创建容器-进入终端-输入下面的命令并回车运行-先别直接复制输入-下方有说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-docker拉取speedtest-x镜像并创建容器-进入终端-输入下面的命令并回车运行-先别直接复制输入-下方有说明"}},[e._v("#")]),e._v(" 1.Docker拉取speedtest-x镜像并创建容器，进入终端，输入下面的命令并回车运行(先别直接复制输入，下方有说明);")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("docker run -d --name speedtest-x --restart unless-stopped -p 9999:80 stilleshan/speedtest-x\n")])])]),s("p",[s("strong",[e._v("说明：")])]),e._v(" "),s("p",[e._v("9999 是http地址的访问端口，可以自行修改。")]),e._v(" "),s("p",[s("img",{attrs:{src:a(595),alt:"img"}})]),e._v(" "),s("h4",{attrs:{id:"_2-上面命令完成以后-管理界面-docker-容器-就能看到speedtest-x已经运行起来了"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-上面命令完成以后-管理界面-docker-容器-就能看到speedtest-x已经运行起来了"}},[e._v("#")]),e._v(" 2.上面命令完成以后，管理界面—Docker—容器，就能看到speedtest-x已经运行起来了；")]),e._v(" "),s("p",[s("img",{attrs:{src:a(596),alt:"img"}})]),e._v(" "),s("h4",{attrs:{id:"_3-浏览器打开设备对应ip加上端口-例如http-192-168-100-1-9999-即可进行内网测速。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-浏览器打开设备对应ip加上端口-例如http-192-168-100-1-9999-即可进行内网测速。"}},[e._v("#")]),e._v(" 3.浏览器打开设备对应IP加上端口，例如http://192.168.100.1:9999/，即可进行内网测速。")]),e._v(" "),s("p",[s("img",{attrs:{src:a(597),alt:"img"}})]),e._v(" "),s("h2",{attrs:{id:"nextcloud"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nextcloud"}},[e._v("#")]),e._v(" Nextcloud")]),e._v(" "),s("p",[e._v("Nextcloud是一款开源免费的私有云存储网盘项目，可以让你快速便捷地搭建一套属于自己或团队的云同步网盘，从而实现跨平台跨设备文件同步、共享、版本控制、团队协作等功能。它的客户端覆盖了Windows、Mac、Android、iOS、Linux 等各种平台，也提供了网页端以及 WebDAV接口，所以你几乎可以在各种设备上方便地访问你的云盘。")]),e._v(" "),s("h4",{attrs:{id:"_1-先安装数据库mariadb-docker拉取mariadb镜像并创建容器-进入终端-输入下面的命令并回车运行-先别直接复制输入-下方有说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-先安装数据库mariadb-docker拉取mariadb镜像并创建容器-进入终端-输入下面的命令并回车运行-先别直接复制输入-下方有说明"}},[e._v("#")]),e._v(" 1.先安装数据库mariadb：Docker拉取mariadb镜像并创建容器，进入终端，输入下面的命令并回车运行(先别直接复制输入，下方有说明);")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("docker run -d --name mariadb \\\n  -p 3344:3306 \\\n  -e MYSQL_ROOT_PASSWORD=123456 \\\n  -v /root/nextcloud/mariadb:/var/lib/mysql \\\n  --restart unless-stopped \\\t\n  mariadb:10.5.12\n")])])]),s("p",[s("strong",[e._v("说明：")])]),e._v(" "),s("p",[e._v("MYSQL_ROOT_PASSWORD=123456 设置数据库root账户密码，设置为123456，按需修改。")]),e._v(" "),s("p",[e._v("3344:3306 将mariadb数据库的3306端口映射为3344，按需修改。")]),e._v(" "),s("p",[s("img",{attrs:{src:a(598),alt:"img"}})]),e._v(" "),s("h4",{attrs:{id:"_2-再安装nextcloud-docker拉取nextcloud镜像并创建容器-进入终端-输入下面的命令并回车运行-先别直接复制输入-下方有说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-再安装nextcloud-docker拉取nextcloud镜像并创建容器-进入终端-输入下面的命令并回车运行-先别直接复制输入-下方有说明"}},[e._v("#")]),e._v(" 2.再安装Nextcloud：Docker拉取nextcloud镜像并创建容器，进入终端，输入下面的命令并回车运行(先别直接复制输入，下方有说明);")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("docker run -d --name nextcloud \\\n  -p 3333:80 \\\n  -v /root/nextcloud/html:/var/www/html \\\n  -v /root/nextcloud/data:/var/www/html/data \\\n  -v /root/nextcloud/apps:/var/www/html/custom_apps \\\n  -v /root/nextcloud/config:/var/www/html/config \\\n  --restart unless-stopped \\\n  nextcloud\n")])])]),s("p",[s("strong",[e._v("说明：")])]),e._v(" "),s("p",[e._v("/root/nextcloud/html Nextcloud主文件夹的映射目录，按需修改。")]),e._v(" "),s("p",[e._v("/root/nextcloud/data 实际数据的映射目录，按需修改。")]),e._v(" "),s("p",[e._v("/root/nextcloud/apps 安装/修改的应用程序的映射目录，按需修改。")]),e._v(" "),s("p",[e._v("/root/nextcloud/config 本地配置文件的映射目录，按需修改。")]),e._v(" "),s("p",[e._v("3333:80 将nextcloud的访问端口映射为3333，按需修改。")]),e._v(" "),s("p",[s("img",{attrs:{src:a(599),alt:"img"}})]),e._v(" "),s("h4",{attrs:{id:"_3-上面2条命令完成以后-管理界面-docker-容器-就能看到mariadb和nextcloud运行起来了"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-上面2条命令完成以后-管理界面-docker-容器-就能看到mariadb和nextcloud运行起来了"}},[e._v("#")]),e._v(" 3.上面2条命令完成以后，管理界面—Docker—容器，就能看到mariadb和nextcloud运行起来了；")]),e._v(" "),s("p",[s("img",{attrs:{src:a(600),alt:"img"}})]),e._v(" "),s("h4",{attrs:{id:"_4-浏览器打开设备对应ip加上端口3333-例如http-192-168-100-1-3333-访问nextcloud进行配置-建议稍微等几分钟再配置-等待数据库完全运行。-。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-浏览器打开设备对应ip加上端口3333-例如http-192-168-100-1-3333-访问nextcloud进行配置-建议稍微等几分钟再配置-等待数据库完全运行。-。"}},[e._v("#")]),e._v(" 4.浏览器打开设备对应IP加上端口3333，例如http://192.168.100.1:3333/，访问nextcloud进行配置(建议稍微等几分钟再配置，等待数据库完全运行。)。")]),e._v(" "),s("p",[s("img",{attrs:{src:a(601),alt:"img"}})]),e._v(" "),s("p",[s("strong",[e._v("说明：")])]),e._v(" "),s("p",[e._v("管理员帐号和密码，自行设置，按自己喜好。")]),e._v(" "),s("p",[e._v("存储与数据库设置：")]),e._v(" "),s("p",[e._v("1.数据目录不用管")]),e._v(" "),s("p",[e._v("2.配置数据库——选择“MySQL/MariaDB”")]),e._v(" "),s("p",[e._v("数据库用户名：root")]),e._v(" "),s("p",[e._v("数据库密码：123456 (前面设置为123456，若自己修改了填写为修改的)")]),e._v(" "),s("p",[e._v("数据库名字：mariadb (默认就是这个)")]),e._v(" "),s("p",[e._v("数据库地址：设备ip+3344 (前面设置为3344，若自己修改了填写为修改的)")]),e._v(" "),s("p",[e._v("3.安装推荐应用，看自己需求。")]),e._v(" "),s("p",[e._v("4.最后就是安装，等待安装完成，就会自动进入Nextcloud界面。")]),e._v(" "),s("p",[s("img",{attrs:{src:a(602),alt:"img"}})])])}),[],!1,null,null,null);t.default=r.exports}}]);